// Code generated by counterfeiter. DO NOT EDIT.
package secure

import (
	"sync"

	"github.com/u-shylianok/ad-service/internal/secure"
)

type HasherMock struct {
	CheckPasswordHashStub        func(string, string) bool
	checkPasswordHashMutex       sync.RWMutex
	checkPasswordHashArgsForCall []struct {
		arg1 string
		arg2 string
	}
	checkPasswordHashReturns struct {
		result1 bool
	}
	checkPasswordHashReturnsOnCall map[int]struct {
		result1 bool
	}
	HashPasswordStub        func(string) (string, error)
	hashPasswordMutex       sync.RWMutex
	hashPasswordArgsForCall []struct {
		arg1 string
	}
	hashPasswordReturns struct {
		result1 string
		result2 error
	}
	hashPasswordReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HasherMock) CheckPasswordHash(arg1 string, arg2 string) bool {
	fake.checkPasswordHashMutex.Lock()
	ret, specificReturn := fake.checkPasswordHashReturnsOnCall[len(fake.checkPasswordHashArgsForCall)]
	fake.checkPasswordHashArgsForCall = append(fake.checkPasswordHashArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CheckPasswordHashStub
	fakeReturns := fake.checkPasswordHashReturns
	fake.recordInvocation("CheckPasswordHash", []interface{}{arg1, arg2})
	fake.checkPasswordHashMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *HasherMock) CheckPasswordHashCallCount() int {
	fake.checkPasswordHashMutex.RLock()
	defer fake.checkPasswordHashMutex.RUnlock()
	return len(fake.checkPasswordHashArgsForCall)
}

func (fake *HasherMock) CheckPasswordHashCalls(stub func(string, string) bool) {
	fake.checkPasswordHashMutex.Lock()
	defer fake.checkPasswordHashMutex.Unlock()
	fake.CheckPasswordHashStub = stub
}

func (fake *HasherMock) CheckPasswordHashArgsForCall(i int) (string, string) {
	fake.checkPasswordHashMutex.RLock()
	defer fake.checkPasswordHashMutex.RUnlock()
	argsForCall := fake.checkPasswordHashArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *HasherMock) CheckPasswordHashReturns(result1 bool) {
	fake.checkPasswordHashMutex.Lock()
	defer fake.checkPasswordHashMutex.Unlock()
	fake.CheckPasswordHashStub = nil
	fake.checkPasswordHashReturns = struct {
		result1 bool
	}{result1}
}

func (fake *HasherMock) CheckPasswordHashReturnsOnCall(i int, result1 bool) {
	fake.checkPasswordHashMutex.Lock()
	defer fake.checkPasswordHashMutex.Unlock()
	fake.CheckPasswordHashStub = nil
	if fake.checkPasswordHashReturnsOnCall == nil {
		fake.checkPasswordHashReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.checkPasswordHashReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *HasherMock) HashPassword(arg1 string) (string, error) {
	fake.hashPasswordMutex.Lock()
	ret, specificReturn := fake.hashPasswordReturnsOnCall[len(fake.hashPasswordArgsForCall)]
	fake.hashPasswordArgsForCall = append(fake.hashPasswordArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.HashPasswordStub
	fakeReturns := fake.hashPasswordReturns
	fake.recordInvocation("HashPassword", []interface{}{arg1})
	fake.hashPasswordMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HasherMock) HashPasswordCallCount() int {
	fake.hashPasswordMutex.RLock()
	defer fake.hashPasswordMutex.RUnlock()
	return len(fake.hashPasswordArgsForCall)
}

func (fake *HasherMock) HashPasswordCalls(stub func(string) (string, error)) {
	fake.hashPasswordMutex.Lock()
	defer fake.hashPasswordMutex.Unlock()
	fake.HashPasswordStub = stub
}

func (fake *HasherMock) HashPasswordArgsForCall(i int) string {
	fake.hashPasswordMutex.RLock()
	defer fake.hashPasswordMutex.RUnlock()
	argsForCall := fake.hashPasswordArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HasherMock) HashPasswordReturns(result1 string, result2 error) {
	fake.hashPasswordMutex.Lock()
	defer fake.hashPasswordMutex.Unlock()
	fake.HashPasswordStub = nil
	fake.hashPasswordReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *HasherMock) HashPasswordReturnsOnCall(i int, result1 string, result2 error) {
	fake.hashPasswordMutex.Lock()
	defer fake.hashPasswordMutex.Unlock()
	fake.HashPasswordStub = nil
	if fake.hashPasswordReturnsOnCall == nil {
		fake.hashPasswordReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.hashPasswordReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *HasherMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkPasswordHashMutex.RLock()
	defer fake.checkPasswordHashMutex.RUnlock()
	fake.hashPasswordMutex.RLock()
	defer fake.hashPasswordMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HasherMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ secure.Hasher = new(HasherMock)
