// Code generated by counterfeiter. DO NOT EDIT.
package repository

import (
	"sync"

	"github.com/u-shylianok/ad-service/domain/model"
	"github.com/u-shylianok/ad-service/internal/repository"
)

type AdMock struct {
	CreateStub        func(int, model.AdRequest) (int, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 int
		arg2 model.AdRequest
	}
	createReturns struct {
		result1 int
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	DeleteStub        func(int, int) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 int
		arg2 int
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(int, model.AdOptionalFieldsParam) (model.Ad, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 int
		arg2 model.AdOptionalFieldsParam
	}
	getReturns struct {
		result1 model.Ad
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 model.Ad
		result2 error
	}
	ListStub        func([]model.AdsSortingParam) ([]model.Ad, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 []model.AdsSortingParam
	}
	listReturns struct {
		result1 []model.Ad
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []model.Ad
		result2 error
	}
	ListWithFilterStub        func(model.AdFilter) ([]model.Ad, error)
	listWithFilterMutex       sync.RWMutex
	listWithFilterArgsForCall []struct {
		arg1 model.AdFilter
	}
	listWithFilterReturns struct {
		result1 []model.Ad
		result2 error
	}
	listWithFilterReturnsOnCall map[int]struct {
		result1 []model.Ad
		result2 error
	}
	UpdateStub        func(int, int, model.AdRequest) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 model.AdRequest
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AdMock) Create(arg1 int, arg2 model.AdRequest) (int, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 int
		arg2 model.AdRequest
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AdMock) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *AdMock) CreateCalls(stub func(int, model.AdRequest) (int, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *AdMock) CreateArgsForCall(i int) (int, model.AdRequest) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AdMock) CreateReturns(result1 int, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *AdMock) CreateReturnsOnCall(i int, result1 int, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *AdMock) Delete(arg1 int, arg2 int) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AdMock) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *AdMock) DeleteCalls(stub func(int, int) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *AdMock) DeleteArgsForCall(i int) (int, int) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AdMock) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *AdMock) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AdMock) Get(arg1 int, arg2 model.AdOptionalFieldsParam) (model.Ad, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 int
		arg2 model.AdOptionalFieldsParam
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AdMock) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *AdMock) GetCalls(stub func(int, model.AdOptionalFieldsParam) (model.Ad, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *AdMock) GetArgsForCall(i int) (int, model.AdOptionalFieldsParam) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AdMock) GetReturns(result1 model.Ad, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 model.Ad
		result2 error
	}{result1, result2}
}

func (fake *AdMock) GetReturnsOnCall(i int, result1 model.Ad, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 model.Ad
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 model.Ad
		result2 error
	}{result1, result2}
}

func (fake *AdMock) List(arg1 []model.AdsSortingParam) ([]model.Ad, error) {
	var arg1Copy []model.AdsSortingParam
	if arg1 != nil {
		arg1Copy = make([]model.AdsSortingParam, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 []model.AdsSortingParam
	}{arg1Copy})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1Copy})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AdMock) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *AdMock) ListCalls(stub func([]model.AdsSortingParam) ([]model.Ad, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *AdMock) ListArgsForCall(i int) []model.AdsSortingParam {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AdMock) ListReturns(result1 []model.Ad, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []model.Ad
		result2 error
	}{result1, result2}
}

func (fake *AdMock) ListReturnsOnCall(i int, result1 []model.Ad, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []model.Ad
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []model.Ad
		result2 error
	}{result1, result2}
}

func (fake *AdMock) ListWithFilter(arg1 model.AdFilter) ([]model.Ad, error) {
	fake.listWithFilterMutex.Lock()
	ret, specificReturn := fake.listWithFilterReturnsOnCall[len(fake.listWithFilterArgsForCall)]
	fake.listWithFilterArgsForCall = append(fake.listWithFilterArgsForCall, struct {
		arg1 model.AdFilter
	}{arg1})
	stub := fake.ListWithFilterStub
	fakeReturns := fake.listWithFilterReturns
	fake.recordInvocation("ListWithFilter", []interface{}{arg1})
	fake.listWithFilterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AdMock) ListWithFilterCallCount() int {
	fake.listWithFilterMutex.RLock()
	defer fake.listWithFilterMutex.RUnlock()
	return len(fake.listWithFilterArgsForCall)
}

func (fake *AdMock) ListWithFilterCalls(stub func(model.AdFilter) ([]model.Ad, error)) {
	fake.listWithFilterMutex.Lock()
	defer fake.listWithFilterMutex.Unlock()
	fake.ListWithFilterStub = stub
}

func (fake *AdMock) ListWithFilterArgsForCall(i int) model.AdFilter {
	fake.listWithFilterMutex.RLock()
	defer fake.listWithFilterMutex.RUnlock()
	argsForCall := fake.listWithFilterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AdMock) ListWithFilterReturns(result1 []model.Ad, result2 error) {
	fake.listWithFilterMutex.Lock()
	defer fake.listWithFilterMutex.Unlock()
	fake.ListWithFilterStub = nil
	fake.listWithFilterReturns = struct {
		result1 []model.Ad
		result2 error
	}{result1, result2}
}

func (fake *AdMock) ListWithFilterReturnsOnCall(i int, result1 []model.Ad, result2 error) {
	fake.listWithFilterMutex.Lock()
	defer fake.listWithFilterMutex.Unlock()
	fake.ListWithFilterStub = nil
	if fake.listWithFilterReturnsOnCall == nil {
		fake.listWithFilterReturnsOnCall = make(map[int]struct {
			result1 []model.Ad
			result2 error
		})
	}
	fake.listWithFilterReturnsOnCall[i] = struct {
		result1 []model.Ad
		result2 error
	}{result1, result2}
}

func (fake *AdMock) Update(arg1 int, arg2 int, arg3 model.AdRequest) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 model.AdRequest
	}{arg1, arg2, arg3})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AdMock) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *AdMock) UpdateCalls(stub func(int, int, model.AdRequest) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *AdMock) UpdateArgsForCall(i int) (int, int, model.AdRequest) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *AdMock) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *AdMock) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AdMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.listWithFilterMutex.RLock()
	defer fake.listWithFilterMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AdMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.Ad = new(AdMock)
