// Code generated by counterfeiter. DO NOT EDIT.
package repository

import (
	"sync"

	"github.com/u-shylianok/ad-service/svc-auth/domain/model"
	"github.com/u-shylianok/ad-service/svc-auth/repository"
)

type UserMock struct {
	CreateStub        func(model.User) (uint32, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 model.User
	}
	createReturns struct {
		result1 uint32
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 uint32
		result2 error
	}
	GetStub        func(string) (model.User, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 model.User
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 model.User
		result2 error
	}
	GetByIDStub        func(uint32) (model.User, error)
	getByIDMutex       sync.RWMutex
	getByIDArgsForCall []struct {
		arg1 uint32
	}
	getByIDReturns struct {
		result1 model.User
		result2 error
	}
	getByIDReturnsOnCall map[int]struct {
		result1 model.User
		result2 error
	}
	GetIDByUsernameStub        func(string) (uint32, error)
	getIDByUsernameMutex       sync.RWMutex
	getIDByUsernameArgsForCall []struct {
		arg1 string
	}
	getIDByUsernameReturns struct {
		result1 uint32
		result2 error
	}
	getIDByUsernameReturnsOnCall map[int]struct {
		result1 uint32
		result2 error
	}
	ListInIDsStub        func([]uint32) ([]model.User, error)
	listInIDsMutex       sync.RWMutex
	listInIDsArgsForCall []struct {
		arg1 []uint32
	}
	listInIDsReturns struct {
		result1 []model.User
		result2 error
	}
	listInIDsReturnsOnCall map[int]struct {
		result1 []model.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UserMock) Create(arg1 model.User) (uint32, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 model.User
	}{arg1})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserMock) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *UserMock) CreateCalls(stub func(model.User) (uint32, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *UserMock) CreateArgsForCall(i int) model.User {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserMock) CreateReturns(result1 uint32, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 uint32
		result2 error
	}{result1, result2}
}

func (fake *UserMock) CreateReturnsOnCall(i int, result1 uint32, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 uint32
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 uint32
		result2 error
	}{result1, result2}
}

func (fake *UserMock) Get(arg1 string) (model.User, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserMock) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *UserMock) GetCalls(stub func(string) (model.User, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *UserMock) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserMock) GetReturns(result1 model.User, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *UserMock) GetReturnsOnCall(i int, result1 model.User, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 model.User
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *UserMock) GetByID(arg1 uint32) (model.User, error) {
	fake.getByIDMutex.Lock()
	ret, specificReturn := fake.getByIDReturnsOnCall[len(fake.getByIDArgsForCall)]
	fake.getByIDArgsForCall = append(fake.getByIDArgsForCall, struct {
		arg1 uint32
	}{arg1})
	stub := fake.GetByIDStub
	fakeReturns := fake.getByIDReturns
	fake.recordInvocation("GetByID", []interface{}{arg1})
	fake.getByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserMock) GetByIDCallCount() int {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	return len(fake.getByIDArgsForCall)
}

func (fake *UserMock) GetByIDCalls(stub func(uint32) (model.User, error)) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = stub
}

func (fake *UserMock) GetByIDArgsForCall(i int) uint32 {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	argsForCall := fake.getByIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserMock) GetByIDReturns(result1 model.User, result2 error) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = nil
	fake.getByIDReturns = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *UserMock) GetByIDReturnsOnCall(i int, result1 model.User, result2 error) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = nil
	if fake.getByIDReturnsOnCall == nil {
		fake.getByIDReturnsOnCall = make(map[int]struct {
			result1 model.User
			result2 error
		})
	}
	fake.getByIDReturnsOnCall[i] = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *UserMock) GetIDByUsername(arg1 string) (uint32, error) {
	fake.getIDByUsernameMutex.Lock()
	ret, specificReturn := fake.getIDByUsernameReturnsOnCall[len(fake.getIDByUsernameArgsForCall)]
	fake.getIDByUsernameArgsForCall = append(fake.getIDByUsernameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetIDByUsernameStub
	fakeReturns := fake.getIDByUsernameReturns
	fake.recordInvocation("GetIDByUsername", []interface{}{arg1})
	fake.getIDByUsernameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserMock) GetIDByUsernameCallCount() int {
	fake.getIDByUsernameMutex.RLock()
	defer fake.getIDByUsernameMutex.RUnlock()
	return len(fake.getIDByUsernameArgsForCall)
}

func (fake *UserMock) GetIDByUsernameCalls(stub func(string) (uint32, error)) {
	fake.getIDByUsernameMutex.Lock()
	defer fake.getIDByUsernameMutex.Unlock()
	fake.GetIDByUsernameStub = stub
}

func (fake *UserMock) GetIDByUsernameArgsForCall(i int) string {
	fake.getIDByUsernameMutex.RLock()
	defer fake.getIDByUsernameMutex.RUnlock()
	argsForCall := fake.getIDByUsernameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserMock) GetIDByUsernameReturns(result1 uint32, result2 error) {
	fake.getIDByUsernameMutex.Lock()
	defer fake.getIDByUsernameMutex.Unlock()
	fake.GetIDByUsernameStub = nil
	fake.getIDByUsernameReturns = struct {
		result1 uint32
		result2 error
	}{result1, result2}
}

func (fake *UserMock) GetIDByUsernameReturnsOnCall(i int, result1 uint32, result2 error) {
	fake.getIDByUsernameMutex.Lock()
	defer fake.getIDByUsernameMutex.Unlock()
	fake.GetIDByUsernameStub = nil
	if fake.getIDByUsernameReturnsOnCall == nil {
		fake.getIDByUsernameReturnsOnCall = make(map[int]struct {
			result1 uint32
			result2 error
		})
	}
	fake.getIDByUsernameReturnsOnCall[i] = struct {
		result1 uint32
		result2 error
	}{result1, result2}
}

func (fake *UserMock) ListInIDs(arg1 []uint32) ([]model.User, error) {
	var arg1Copy []uint32
	if arg1 != nil {
		arg1Copy = make([]uint32, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.listInIDsMutex.Lock()
	ret, specificReturn := fake.listInIDsReturnsOnCall[len(fake.listInIDsArgsForCall)]
	fake.listInIDsArgsForCall = append(fake.listInIDsArgsForCall, struct {
		arg1 []uint32
	}{arg1Copy})
	stub := fake.ListInIDsStub
	fakeReturns := fake.listInIDsReturns
	fake.recordInvocation("ListInIDs", []interface{}{arg1Copy})
	fake.listInIDsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UserMock) ListInIDsCallCount() int {
	fake.listInIDsMutex.RLock()
	defer fake.listInIDsMutex.RUnlock()
	return len(fake.listInIDsArgsForCall)
}

func (fake *UserMock) ListInIDsCalls(stub func([]uint32) ([]model.User, error)) {
	fake.listInIDsMutex.Lock()
	defer fake.listInIDsMutex.Unlock()
	fake.ListInIDsStub = stub
}

func (fake *UserMock) ListInIDsArgsForCall(i int) []uint32 {
	fake.listInIDsMutex.RLock()
	defer fake.listInIDsMutex.RUnlock()
	argsForCall := fake.listInIDsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UserMock) ListInIDsReturns(result1 []model.User, result2 error) {
	fake.listInIDsMutex.Lock()
	defer fake.listInIDsMutex.Unlock()
	fake.ListInIDsStub = nil
	fake.listInIDsReturns = struct {
		result1 []model.User
		result2 error
	}{result1, result2}
}

func (fake *UserMock) ListInIDsReturnsOnCall(i int, result1 []model.User, result2 error) {
	fake.listInIDsMutex.Lock()
	defer fake.listInIDsMutex.Unlock()
	fake.ListInIDsStub = nil
	if fake.listInIDsReturnsOnCall == nil {
		fake.listInIDsReturnsOnCall = make(map[int]struct {
			result1 []model.User
			result2 error
		})
	}
	fake.listInIDsReturnsOnCall[i] = struct {
		result1 []model.User
		result2 error
	}{result1, result2}
}

func (fake *UserMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	fake.getIDByUsernameMutex.RLock()
	defer fake.getIDByUsernameMutex.RUnlock()
	fake.listInIDsMutex.RLock()
	defer fake.listInIDsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UserMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.User = new(UserMock)
