// Code generated by counterfeiter. DO NOT EDIT.
package repository

import (
	"sync"

	"github.com/u-shylianok/ad-service/svc-ads/repository"
)

type PhotoMock struct {
	CreateStub        func(int, string) (int, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 int
		arg2 string
	}
	createReturns struct {
		result1 int
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	CreateListStub        func(int, []string) error
	createListMutex       sync.RWMutex
	createListArgsForCall []struct {
		arg1 int
		arg2 []string
	}
	createListReturns struct {
		result1 error
	}
	createListReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteAllByAdStub        func(int) error
	deleteAllByAdMutex       sync.RWMutex
	deleteAllByAdArgsForCall []struct {
		arg1 int
	}
	deleteAllByAdReturns struct {
		result1 error
	}
	deleteAllByAdReturnsOnCall map[int]struct {
		result1 error
	}
	ListLinksStub        func() ([]string, error)
	listLinksMutex       sync.RWMutex
	listLinksArgsForCall []struct {
	}
	listLinksReturns struct {
		result1 []string
		result2 error
	}
	listLinksReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ListLinksByAdStub        func(int) ([]string, error)
	listLinksByAdMutex       sync.RWMutex
	listLinksByAdArgsForCall []struct {
		arg1 int
	}
	listLinksByAdReturns struct {
		result1 []string
		result2 error
	}
	listLinksByAdReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PhotoMock) Create(arg1 int, arg2 string) (int, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *PhotoMock) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *PhotoMock) CreateCalls(stub func(int, string) (int, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *PhotoMock) CreateArgsForCall(i int) (int, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *PhotoMock) CreateReturns(result1 int, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *PhotoMock) CreateReturnsOnCall(i int, result1 int, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *PhotoMock) CreateList(arg1 int, arg2 []string) error {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createListMutex.Lock()
	ret, specificReturn := fake.createListReturnsOnCall[len(fake.createListArgsForCall)]
	fake.createListArgsForCall = append(fake.createListArgsForCall, struct {
		arg1 int
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.CreateListStub
	fakeReturns := fake.createListReturns
	fake.recordInvocation("CreateList", []interface{}{arg1, arg2Copy})
	fake.createListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PhotoMock) CreateListCallCount() int {
	fake.createListMutex.RLock()
	defer fake.createListMutex.RUnlock()
	return len(fake.createListArgsForCall)
}

func (fake *PhotoMock) CreateListCalls(stub func(int, []string) error) {
	fake.createListMutex.Lock()
	defer fake.createListMutex.Unlock()
	fake.CreateListStub = stub
}

func (fake *PhotoMock) CreateListArgsForCall(i int) (int, []string) {
	fake.createListMutex.RLock()
	defer fake.createListMutex.RUnlock()
	argsForCall := fake.createListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *PhotoMock) CreateListReturns(result1 error) {
	fake.createListMutex.Lock()
	defer fake.createListMutex.Unlock()
	fake.CreateListStub = nil
	fake.createListReturns = struct {
		result1 error
	}{result1}
}

func (fake *PhotoMock) CreateListReturnsOnCall(i int, result1 error) {
	fake.createListMutex.Lock()
	defer fake.createListMutex.Unlock()
	fake.CreateListStub = nil
	if fake.createListReturnsOnCall == nil {
		fake.createListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PhotoMock) DeleteAllByAd(arg1 int) error {
	fake.deleteAllByAdMutex.Lock()
	ret, specificReturn := fake.deleteAllByAdReturnsOnCall[len(fake.deleteAllByAdArgsForCall)]
	fake.deleteAllByAdArgsForCall = append(fake.deleteAllByAdArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.DeleteAllByAdStub
	fakeReturns := fake.deleteAllByAdReturns
	fake.recordInvocation("DeleteAllByAd", []interface{}{arg1})
	fake.deleteAllByAdMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PhotoMock) DeleteAllByAdCallCount() int {
	fake.deleteAllByAdMutex.RLock()
	defer fake.deleteAllByAdMutex.RUnlock()
	return len(fake.deleteAllByAdArgsForCall)
}

func (fake *PhotoMock) DeleteAllByAdCalls(stub func(int) error) {
	fake.deleteAllByAdMutex.Lock()
	defer fake.deleteAllByAdMutex.Unlock()
	fake.DeleteAllByAdStub = stub
}

func (fake *PhotoMock) DeleteAllByAdArgsForCall(i int) int {
	fake.deleteAllByAdMutex.RLock()
	defer fake.deleteAllByAdMutex.RUnlock()
	argsForCall := fake.deleteAllByAdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *PhotoMock) DeleteAllByAdReturns(result1 error) {
	fake.deleteAllByAdMutex.Lock()
	defer fake.deleteAllByAdMutex.Unlock()
	fake.DeleteAllByAdStub = nil
	fake.deleteAllByAdReturns = struct {
		result1 error
	}{result1}
}

func (fake *PhotoMock) DeleteAllByAdReturnsOnCall(i int, result1 error) {
	fake.deleteAllByAdMutex.Lock()
	defer fake.deleteAllByAdMutex.Unlock()
	fake.DeleteAllByAdStub = nil
	if fake.deleteAllByAdReturnsOnCall == nil {
		fake.deleteAllByAdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteAllByAdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PhotoMock) ListLinks() ([]string, error) {
	fake.listLinksMutex.Lock()
	ret, specificReturn := fake.listLinksReturnsOnCall[len(fake.listLinksArgsForCall)]
	fake.listLinksArgsForCall = append(fake.listLinksArgsForCall, struct {
	}{})
	stub := fake.ListLinksStub
	fakeReturns := fake.listLinksReturns
	fake.recordInvocation("ListLinks", []interface{}{})
	fake.listLinksMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *PhotoMock) ListLinksCallCount() int {
	fake.listLinksMutex.RLock()
	defer fake.listLinksMutex.RUnlock()
	return len(fake.listLinksArgsForCall)
}

func (fake *PhotoMock) ListLinksCalls(stub func() ([]string, error)) {
	fake.listLinksMutex.Lock()
	defer fake.listLinksMutex.Unlock()
	fake.ListLinksStub = stub
}

func (fake *PhotoMock) ListLinksReturns(result1 []string, result2 error) {
	fake.listLinksMutex.Lock()
	defer fake.listLinksMutex.Unlock()
	fake.ListLinksStub = nil
	fake.listLinksReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *PhotoMock) ListLinksReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listLinksMutex.Lock()
	defer fake.listLinksMutex.Unlock()
	fake.ListLinksStub = nil
	if fake.listLinksReturnsOnCall == nil {
		fake.listLinksReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listLinksReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *PhotoMock) ListLinksByAd(arg1 int) ([]string, error) {
	fake.listLinksByAdMutex.Lock()
	ret, specificReturn := fake.listLinksByAdReturnsOnCall[len(fake.listLinksByAdArgsForCall)]
	fake.listLinksByAdArgsForCall = append(fake.listLinksByAdArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.ListLinksByAdStub
	fakeReturns := fake.listLinksByAdReturns
	fake.recordInvocation("ListLinksByAd", []interface{}{arg1})
	fake.listLinksByAdMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *PhotoMock) ListLinksByAdCallCount() int {
	fake.listLinksByAdMutex.RLock()
	defer fake.listLinksByAdMutex.RUnlock()
	return len(fake.listLinksByAdArgsForCall)
}

func (fake *PhotoMock) ListLinksByAdCalls(stub func(int) ([]string, error)) {
	fake.listLinksByAdMutex.Lock()
	defer fake.listLinksByAdMutex.Unlock()
	fake.ListLinksByAdStub = stub
}

func (fake *PhotoMock) ListLinksByAdArgsForCall(i int) int {
	fake.listLinksByAdMutex.RLock()
	defer fake.listLinksByAdMutex.RUnlock()
	argsForCall := fake.listLinksByAdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *PhotoMock) ListLinksByAdReturns(result1 []string, result2 error) {
	fake.listLinksByAdMutex.Lock()
	defer fake.listLinksByAdMutex.Unlock()
	fake.ListLinksByAdStub = nil
	fake.listLinksByAdReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *PhotoMock) ListLinksByAdReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listLinksByAdMutex.Lock()
	defer fake.listLinksByAdMutex.Unlock()
	fake.ListLinksByAdStub = nil
	if fake.listLinksByAdReturnsOnCall == nil {
		fake.listLinksByAdReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listLinksByAdReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *PhotoMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.createListMutex.RLock()
	defer fake.createListMutex.RUnlock()
	fake.deleteAllByAdMutex.RLock()
	defer fake.deleteAllByAdMutex.RUnlock()
	fake.listLinksMutex.RLock()
	defer fake.listLinksMutex.RUnlock()
	fake.listLinksByAdMutex.RLock()
	defer fake.listLinksByAdMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PhotoMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.Photo = new(PhotoMock)
